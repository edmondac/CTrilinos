/*! \mainpage CTrilinos: C interface to Trilinos

\section Overview

To avoid passing pointers back and forth between C and C++, we instead
utilize a lightweight identifier struct that can be used to pull the
underlying object out of a table so that its methods may be invoked.
This struct has the form

\code
typedef struct {
    CTrilinos_Type_ID_t type;
    int index;
    boolean is_const;
} CTrilinos_Object_ID_t;
\endcode

Although \link CTrilinos_Object_ID_t::type type \endlink in this
struct can be thought of as referring to the type of object to which
it refers, this is not completely accurate.  In reality,
\link CTrilinos_Object_ID_t::type type \endlink identifies the
type-specific table in which the object is stored, and the underlying
object may be of any type that can be legally
<tt>dynamic_cast&lt;&gt;</tt>'ed to the table type.  This is a critical
detail that must be understood.  The field
\link CTrilinos_Object_ID_t::index index \endlink specifies which
element of the table corresponds to the object in question.

For every class, C, that has been wrapped by CTrilinos (including
virtual classes), two tables exist: one that stores Teuchos::RCP &lt;const C&gt;
(for when \link CTrilinos_Object_ID_t::is_const is_const \endlink is
#TRUE) and a separate one to store Teuchos::RCP &lt;C&gt; (for when
\link CTrilinos_Object_ID_t::is_const is_const \endlink is #FALSE).
This ensures that the only methods that can be invoked on
<tt>const</tt> objects are the ones declared <tt>const</tt> themselves.
It is critical to note here that each table entry contains a Teuchos::RCP
to the object, not the object itself.  This allows an object to be
referenced by more than one table, just as more than one pointer could
exist to any given object.

When a method expects an argument of class C, its wrapper expects a to
be passed a struct referring to the type-specific table for class C.
To allow the compiler to do compile-time type-checking of the
arguments, each wrapped class has its own, type-specific struct, which
is identical in form to the generic one described above.  For example,
the struct for an Epetra_Comm, whose
\link CT_Epetra_Comm_ID_t::type type \endlink is
\link CTrilinos_Type_ID_t::CT_Epetra_Comm_ID CT_Epetra_Comm_ID\endlink,
is named CT_Epetra_Comm_ID_t.  There is no circumstance under which
\link CTrilinos_Object_ID_t::type type \endlink should not correspond
to the type name of the struct.

If one wants to pass an object of a class derived from C to a method
expecting class C, then a Teuchos::RCP to that object must first be
stored in the C table.  This can be done using the CTrilinos casting
methods.  Although two function calls are necessary, as shown below,
they should ALWAYS be used in pairs and the intermediate result should
NEVER be stored:

\code
CT_Epetra_SerialComm_ID_t serialComm;
CT_Epetra_Comm_ID_t Comm;

serialComm = Epetra_SerialComm_Create();
Comm = Epetra_Comm_Cast(Epetra_SerialComm_Abstract(serialComm));
\endcode

The inner function simply changes the type of the struct from
CT_Epetra_SerialComm_ID_t to CTrilinos_Object_ID_t, which is the only
struct type that can be passed to the outer function.  The outer
function pulls the underlying object from the Epetra_SerialComm table
using its Teuchos::RCP, does a <tt>dynamic_cast&lt;&gt;</tt> on the
object, and stores a new Teuchos::RCP in the Epetra_Comm table.
Because the two structs serialComm and Comm now refer to the same
underlying object, any operation affecting one will affect the other
as well.

An object can be removed from the table using its Destroy function,

\code
Epetra_Comm_Destroy(&Comm);
\endcode

When removed from the table, \link CT_Epetra_Comm_ID_t::type type \endlink
will be changed to CT_Invalid_ID and \link CT_Epetra_Comm_ID_t::index index \endlink
set to -1.  The underlying object will only be destroyed when it is no
longer referenced by any table, provided that the object was created
using a CTrilinos constructor.  If it was stored in a table after being
returned by some method, then CTrilinos assumes no ownership of that
object and will not destroy it even when it is removed from the final
table.

The name of all wrappers for methods of a class will begin with the
name of the class.  Due to a lack of function overloading in C, many
of the methods have been renamed, so check the Doxygen pages to find
out the exact name of the wrapper for any given method.  The first
argument of any method, with the exceptions being constructors,
destructors, and static methods, will be the struct identifying the
object on which the method is to be invoked.  For example,

\code
Epetra_Comm_Barrier(Comm);
\endcode

is the wrapper for

\code
Epetra_Comm::Barrier().
\endcode

A simple, yet illustrative, example of using the CTrilinos interface
to Epetra can be found in <tt>verySimple.c</tt>.
*/

/*! \example verySimple.c
 * This is a very simple example of how to use the CTrilinos interface
 * to Epetra.  This example follows from the Epetra example by the same
 * name.
*/

/*! \example CrsGraph_example.c
 * This is an example of how to use the CTrilinos interface to Epetra.
 * This example follows from the Epetra example my_example.
*/

/*! \example example_AmesosFactory_Tridiag.c
 * This is an example of how to use the CTrilinos interface to Amesos.
 * This example follows from the Amesos example by the same name.
*/

